package {{packageName}};

import io.polyapi.client.api.model.PolyEntity;
import io.polyapi.client.internal.proxy.PolyProxyFactory;
import io.polyapi.client.internal.model.PolyContext;
{{~#each specifications}}
    import {{{packageName}}}.{{{className}}};
    {{~#ifIsType this "ServerVariableSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    import {{{packageName}}}.{{{className}}};
{{~/each}}

public final class Vari extends PolyContext {
{{~#each specifications}}
    {{~#ifIsType this "ServerVariableSpecification"}}
        @PolyEntity("{{id}}")
        private static final {{valueType}} {{name}};
    {{~/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    public static final {{className}} {{name}};
{{~/each}}

static {
var vari = new Vari();
{{~#each specifications}}
    {{~#ifIsType this "ServerVariableSpecification"}}
        {{name}} = vari.createServerVariable("{{{valueType}}}", "{{{packageName}}}");
    {{~/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    {{name}} = vari.createSubContext({{className}}.class);
{{~/each}}
}

{{~#ifIsType this "ServerVariableSpecification"}}
    public static void update{{{className}}}Variable({{{valueType}}} value) {
        this.{{name}}Handler.update(value);
    }

    {{~#if variable.secret}}
    {{~else}}
    public static {{{valueType}}} get{{{className}}}Variable() {
        return this.{{name}}Handler.get();
    }
    {{/if}}
{{~/ifIsType}}

}
