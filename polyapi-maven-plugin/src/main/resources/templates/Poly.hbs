package {{packageName}};

import io.polyapi.client.internal.model.PolyContext;
{{~#each specifications}}
    import {{{packageName}}}.{{{className}}};
    {{~#ifIsType this "ServerFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}
    {{~#ifIsType this "CustomFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    import {{{packageName}}}.{{{className}}};
{{~/each}}


public final class Poly extends PolyContext {
{{~#each specifications}}
    private static final {{className}} {{name}};
{{~/each}}
{{#each subcontexts}}
    public static final {{className}} {{name}};
{{~/each}}

static {
Poly poly = new Poly();
{{~#each specifications}}
    {{~#ifIsType this "ServerFunctionSpecification"}}
        {{name}} = poly.createServerFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "CustomFunctionSpecification"}}
        {{name}} = poly.createCustomFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        {{name}} = poly.createApiFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "WebhookHandleSpecification"}}
        {{name}} = poly.createWebhookHandle({{className}}.class);
    {{~/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    {{name}} = poly.createSubContext({{className}}.class);
{{~/each}}
}

{{~#each specifications}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        public static {{{function.returnType.getInCodeType}}} {{name}}({{{renderArguments this}}}) {
        return {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless @last}}, {{~/unless}}{{~/each}});
        }
    {{~/ifIsType}}

    {{~#ifIsType this "CustomFunctionSpecification"}}
        {{~#if this.isJava}}
            {{~#if function.returnsValue}}
                public static {{function.returnType}}
            {{~else}}
                public static void
            {{~/if}} {{name}}({{{renderArguments this}}}) {
            {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless @last}}, {{~/unless}}{{~/each}});
            }
        {{~/if}}
    {{~/ifIsType}}

    {{~#ifIsType this "ServerFunctionSpecification"}}
        public static {{{function.returnType.getInCodeType}}} {{name}}({{{renderArguments this}}}) {
        return {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless @last}}, {{~/unless}}{{~/each}});
        }
    {{~/ifIsType}}

    {{~#ifIsType this "WebhookHandleSpecification"}}
        public void {{name}}(WebhookEventConsumer<{{{function.arguments.0.type.spec.arguments.0.type.inCodeType}}}> callback) {
        this.{{name}}.{{name}}(callback);
        }
    {{~/ifIsType}}

    {{~#ifIsType this "AuthFunctionSpecification"}}
        {{~#if subResource}}
            public void {{name}}(String token) {
            this.{{name}}.{{name}}(token);
            }
        {{~else}}
            public void getToken(String clientId, String clientSecret{{#if
                    audienceRequired}}, String audience{{/if}}, String[] scopes, AuthTokenEventConsumer callback) {
            this.{{name}}.getToken(clientId, clientSecret{{#if audienceRequired}}, audience{{/if}}, scopes, callback);
            }

            public void getToken(String clientId, String clientSecret{{#if
                    audienceRequired}}, String audience{{/if}}, String[] scopes, AuthTokenEventConsumer callback, AuthTokenOptions options) {
            this.{{name}}.getToken(clientId, clientSecret{{#if
                    audienceRequired}}, audience{{/if}}, scopes, callback, options);
            }
        {{~/if}}
    {{~/ifIsType}}
{{~/each}}
}
