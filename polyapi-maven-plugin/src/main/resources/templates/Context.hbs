package {{packageName}};

import io.polyapi.client.internal.proxy.PolyProxyFactory;
import io.polyapi.client.internal.model.PolyContext;
import io.polyapi.client.api.model.websocket.WebhookEventConsumer;
import io.polyapi.client.api.AuthTokenEventConsumer;
import io.polyapi.client.internal.proxy.WebhookHandlerFactory;
{{~#each specifications}}
    import {{{packageName}}}.{{{className}}};
    {{~#ifIsType this "ServerFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}
    {{~#ifIsType this "CustomFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        {{~#each this.imports}}
            import {{{this}}};
        {{~/each}}
    {{~/ifIsType}}

{{~/each}}
{{#each subcontexts}}
    import {{{packageName}}}.{{{className}}};
{{~/each}}


public class {{className}} extends PolyContext {
{{~#each specifications}}
    private final {{className}} {{name}};
{{~/each}}
{{#each subcontexts}}
    public final {{className}} {{name}};
{{~/each}}

public {{className}}(PolyProxyFactory proxyFactory, WebhookHandlerFactory webhookHandlerFactory) {
super(proxyFactory, webhookHandlerFactory);
{{~#each specifications}}
    {{~#ifIsType this "ServerFunctionSpecification"}}
        this.{{name}} = createServerFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "CustomFunctionSpecification"}}
        this.{{name}} = createCustomFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        this.{{name}} = createApiFunctionProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "ServerVariableSpecification"}}
        this.{{name}} = createServerVariableProxy({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "WebhookHandleSpecification"}}
        this.{{name}} = createWebhookHandle({{className}}.class);
    {{~/ifIsType}}
    {{~#ifIsType this "AuthFunctionSpecification"}}
        this.{{name}} = createWebhookHandle({{className}}.class);
    {{~/ifIsType}}
{{~/each}}
{{#each subcontexts}}
    this.{{name}} = new {{className}}(proxyFactory, webhookHandlerFactory);
{{~/each}}
}

{{~#each specifications}}
    {{~#ifIsType this "ApiFunctionSpecification"}}
        public  {{{this.resultType}}} {{name}}({{{renderArguments function.arguments}}}) {
        {{~#if function.returnsValue}}
            return
        {{~else}}
        {{~/if}} {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless
                @last}}, {{~/unless}}{{~/each}});
        }
    {{~/ifIsType}}

    {{~#ifIsType this "CustomFunctionSpecification"}}
        {{~#if this.isJava}}
            public {{{this.resultType}}} {{name}}({{{renderArguments function.arguments}}}) {
            {{~#if function.returnsValue}}
                return
            {{~else}}
            {{~/if}} {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless
                    @last}}, {{~/unless}}{{~/each}});
            }
        {{~/if}}
    {{~/ifIsType}}

    {{~#ifIsType this "ServerFunctionSpecification"}}
        public {{{this.resultType}}} {{name}}({{{renderArguments function.arguments}}}) {
        {{~#if function.returnsValue}}
            return
        {{~else}}
        {{~/if}} {{name}}.{{name}}({{~#each function.arguments}}{{inCodeName}}{{~#unless
                @last}}, {{~/unless}}{{~/each}});
        }
    {{~/ifIsType}}

    {{~#ifIsType this "WebhookHandleSpecification"}}
        public void {{name}}(WebhookEventConsumer<{{{function.arguments.0.type.spec.arguments.0.type.inCodeType}}}> callback) {
        this.{{name}}.{{name}}(callback);
        }
    {{~/ifIsType}}

    {{~#ifIsType this "AuthFunctionSpecification"}}
        {{~#if subResource}}
            public void {{name}}(String token) {
            this.{{name}}.{{name}}(token);
            }
        {{~else}}
            public void getToken(String clientId, String clientSecret{{#if
                    audienceRequired}}, String audience{{/if}}, String[] scopes, AuthTokenEventConsumer callback) {
            this.{{name}}.getToken(clientId, clientSecret{{#if audienceRequired}}, audience{{/if}}, scopes, callback);
            }

            public void getToken(String clientId, String clientSecret{{#if
                    audienceRequired}}, String audience{{/if}}, String[] scopes, AuthTokenEventConsumer callback, AuthTokenOptions options) {
            this.{{name}}.getToken(clientId, clientSecret{{#if
                    audienceRequired}}, audience{{/if}}, scopes, callback, options);
            }
        {{~/if}}
    {{~/ifIsType}}
{{~/each}}
}
