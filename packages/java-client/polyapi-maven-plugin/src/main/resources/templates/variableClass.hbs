package {{packageName}};

import java.util.function.Consumer;

import org.json.JSONException;
import org.json.JSONObject;

import com.fasterxml.jackson.core.type.TypeReference;
import io.polyapi.client.api.*;

public class {{className}} {
  private final ApiClient apiClient = ApiClient.getInstance();
  private final WebSocketClient webSocketClient = WebSocketClient.getInstance();
  private final VariableInjectManager variableInjectManager = VariableInjectManager.getInstance();
  private final ObjectMapper objectMapper = ObjectMapper.getInstance();

  public {{typeName}} get() {
    {{~#if specification.variable.secret}}
    throw new PolyRuntimeException("Cannot access secret variable from client.");
    {{~else}}
    var response = apiClient.get("/variables/{{specification.id}}/value");
    try {
      var responseBody = response.getBody();
      return objectMapper.readValue(responseBody, {{typeName}}.class);
    } catch (Exception e) {
      throw new PolyRuntimeException(e);
    }
    {{~/if}}
  }

  public VariableUpdateResponse<{{typeName}}> update({{typeName}} value) {
    try {
      var payloadForThePolyApiFunction = new JSONObject();;
      payloadForThePolyApiFunction.put("value", objectMapper.toJSONValue(value));

      var response = apiClient.patch("/variables/{{specification.id}}", payloadForThePolyApiFunction.toString());
      var typeRef = new TypeReference<VariableUpdateResponse.Data<{{typeName}}>>() {
      };
      var variable = objectMapper.readValue(response.getBody(), typeRef);
      return new VariableUpdateResponse<>(variable, response.getStatusCode(), response.getHeaders());
    } catch (Exception e) {
      throw new PolyRuntimeException(e);
    }
  }

  {{~#if specification.variable.secret}}
  public String inject() {
    return inject(null, String.class);
  }

  public String inject(String path) {
    return inject(path, String.class);
  }

  public <T> T inject(Class<T> clazz) {
    return inject(null, clazz);
  }

  public <T> T inject(String path, Class<T> clazz) {
    Object value;
    if (clazz == String.class) {
      value = new String("");
    } else if(clazz == Integer.class) {
      value = new Integer(0);
    } else if(clazz == Long.class) {
      value = new Long(0);
    } else if(clazz == Double.class) {
      value = new Double(0);
    } else if(clazz == Boolean.class) {
      value = new Boolean(false);
    } else if(clazz == Float.class) {
      value = new Float(0);
    } else {
      try {
        value = clazz.newInstance();
      } catch (InstantiationException | IllegalAccessException e) {
        throw new PolyRuntimeException(e);
      }
    }
    variableInjectManager.saveInjectedVariable(value, new InjectedVariable("{{specification.id}}", path));
    return (T) value;
  }
  {{~else}}
  public {{typeName}} inject() {
    return inject(null);
  }

  public {{typeName}} inject(String path) {
    {{#ifEquals typeName "Object"}}
    var value = new Object();
    {{else ifEquals typeName "String"}}
    var value = new String("");
    {{else ifEquals typeName "Boolean"}}
    var value = new Boolean(false);
    {{else ifEquals typeName "Integer"}}
    var value = new Integer(0);
    {{else ifEquals typeName "Long"}}
    var value = new Long(0);
    {{else ifEquals typeName "Float"}}
    var value = new Float(0);
    {{else ifEquals typeName "Double"}}
    var value = new Double(0);
    {{else}}
    var value = new {{typeName}}();
    {{/ifEquals}}
    variableInjectManager.saveInjectedVariable(value, new InjectedVariable("{{specification.id}}", path));
    return value;
  }
  {{~/if}}

  public OnUpdateListener onUpdate(Consumer<VariableChangeEvent<{{typeName}}>> callback) {
    try {
      return webSocketClient.registerOnUpdateVariableEventHandler("{{specification.id}}", objects -> {
        var data = (JSONObject) objects[0];
        var typeRef = new TypeReference<VariableChangeEvent<{{typeName}}>>() {
        };
        try {
          callback.accept(
            objectMapper.readValue(data.toString(), typeRef)
          );
        } catch (Exception e) {
          throw new PolyRuntimeException(e);
        }
      });
    } catch (JSONException e) {
      throw new PolyRuntimeException(e);
    }
  }
}
