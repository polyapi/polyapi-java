const Axios = require('axios');
const set = require('lodash/set');
const merge = require('lodash/merge');
const { HttpProxyAgent } = require('http-proxy-agent');
const { HttpsProxyAgent } = require('https-proxy-agent');
const https = require('https');
const dotenv = require('dotenv');

dotenv.config();

const httpProxy = process.env.HTTP_PROXY || process.env.http_proxy || process.env.npm_config_proxy;
const httpsProxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.npm_config_https_proxy;
const nodeEnv = process.env.NODE_ENV;

const axios = Axios.create({
  httpAgent: httpProxy ? new HttpProxyAgent(httpProxy) : nodeEnv == 'development' ? new https.Agent({rejectUnauthorized: false,}) : undefined,
  httpsAgent: httpsProxy
    ? new HttpsProxyAgent(httpsProxy, {
        rejectUnauthorized: nodeEnv !== 'development',
      })
    : nodeEnv == 'development' ? new https.Agent({rejectUnauthorized: false,}) : undefined,
  proxy: false,
});

const functions = [
{{#each specifications}}
  ['{{#if context}}{{context}}.{{/if}}{{name}}', '{{id}}',{{#each function.arguments}}'{{name}}',{{/each}}],
{{/each}}
];

module.exports = (clientID) => merge(
  {},
  functions.reduce(
    (acc, [path, id, ...argKeys]) => set(
      acc,
      path,
      (...args) => axios.post(
        `{{apiBaseUrl}}/functions/api/${id}/execute`,
        {
          clientID,
          args: argKeys.reduce((acc, key, index) => ({ ...acc, [key]: args[index] }), {})
        }
      ).then(({ data }) => data)),
    {}
  )
);
