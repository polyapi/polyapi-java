const set = require('lodash/set');
const merge = require('lodash/merge');
const { io } = require('socket.io-client');
const apiFunctions = require('./api');
const clientFunctions = require('./client');
const webhooks = require('./webhooks');
const authFunctions = require('./auth');
const serverFunctions = require('./server');
const vari = require('./vari');
const polyCustom = require('./poly-custom');
const { createErrorHandler, sendLocalErrorEvent } = require('./error-handler');

const clientID = '{{clientID}}';
const nodeEnv = process.env.NODE_ENV;
const isDevEnv = nodeEnv === 'development';

let socket = null;
const getSocket = () => {
  let apiBaseUrl = '{{apiBaseUrl}}';
  if (!isDevEnv) {
    apiBaseUrl = apiBaseUrl.replace(/^http:/, 'https:');
  }

  if (!socket) {
    socket = io(`${apiBaseUrl}/events`);
  }
  return socket;
};
const getApiKey = () => polyCustom.executionApiKey || '{{apiKey}}';
const poly = {};

merge(
  poly,
  apiFunctions(clientID),
  clientFunctions(poly, sendLocalErrorEvent),
  serverFunctions(clientID),
  authFunctions(clientID, getSocket, getApiKey),
  webhooks(clientID, getSocket, getApiKey),
),
module.exports = {
  ...poly,
  errorHandler: createErrorHandler(getApiKey, getSocket),
  vari: vari(clientID, getSocket, getApiKey),
  polyCustom,
};
