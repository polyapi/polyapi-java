const set = require('lodash/set');
const merge = require('lodash/merge');
const { io } = require("socket.io-client");
const apiFunctions = require('./api');
const clientFunctions = require('./client');
const webhooks = require('./webhooks');
const authFunctions = require('./auth');
const serverFunctions = require('./server');

const clientID = '{{clientID}}';
let socket = null;
const getSocket = () => {
  if (!socket) {
    socket = io('{{apiBaseUrl}}/events');
  }
  return socket;
};

const errorHandler = {
  on: (path, callback) => {
    const socket = getSocket();
    socket.emit('registerErrorHandler', {
      clientID,
      path,
      apiKey: '{{apiKey}}'
    });
    socket.on(`handleError:${path}`, callback);
  },
  off: (path) => {
    const socket = getSocket();
    socket.emit('unregisterErrorHandler', {
      clientID,
      path,
      apiKey: '{{apiKey}}'
    });
  }
};

const poly = {};
module.exports = merge(
  poly,
  apiFunctions(clientID),
  clientFunctions(poly),
  serverFunctions(clientID),
  authFunctions(clientID, getSocket),
  webhooks(clientID, getSocket),
  {
    errorHandler
  }
);
