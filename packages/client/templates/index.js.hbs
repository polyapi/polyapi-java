const set = require('lodash/set');
const merge = require('lodash/merge');
const { io } = require('socket.io-client');
const apiFunctions = require('./api');
const clientFunctions = require('./client');
const webhooks = require('./webhooks');
const authFunctions = require('./auth');
const serverFunctions = require('./server');
const vari = require('./vari');
const polyCustom = require('./poly-custom');

const clientID = '{{clientID}}';
const nodeEnv = process.env.NODE_ENV;
const isDevEnv = nodeEnv === 'development';

let socket = null;
const getSocket = () => {
  let apiBaseUrl = '{{apiBaseUrl}}';
  if (!isDevEnv) {
    apiBaseUrl = apiBaseUrl.replace(/^http:/, 'https:');
  }

  if (!socket) {
    socket = io(`${apiBaseUrl}/events`, {
      transports: ['websocket']
    });
  }
  return socket;
};
const getApiKey = () => polyCustom.executionApiKey || '{{apiKey}}';

const errorHandler = {
  on: (path, callback, options) => {
    const socket = getSocket();
    let handlerId = null;
    socket.emit('registerErrorHandler', {
      ...options,
      path,
      apiKey: getApiKey(),
    }, (id) => {
      handlerId = id;
      socket.on(`handleError:${handlerId}`, callback);
    });

    return () => {
      if (handlerId) {
        socket.off(`handleError:${handlerId}`);
        socket.emit('unregisterErrorHandler', {
          id: handlerId,
          path,
          apiKey: getApiKey(),
        });
      }
    };
  },
};

const poly = {};

merge(
  poly,
  apiFunctions(clientID),
  clientFunctions(poly),
  serverFunctions(clientID),
  authFunctions(clientID, getSocket, getApiKey),
  webhooks(clientID, getSocket, getApiKey),
),
module.exports = {
  ...poly,
  errorHandler,
  vari: vari(clientID, getSocket, getApiKey),
  polyCustom,
};
