const axios = require('../axios');
const set = require('lodash/set');
const get = require('lodash/get');
const merge = require('lodash/merge');

const variables = [
{{#each specifications}}
  ['{{#if context}}{{context}}.{{/if}}{{name}}', '{{id}}', {{variable.secret}}],
{{/each}}
];

const contextPaths = [
{{#each contextPaths}}
  '{{this}}',
{{/each}}
];

const getVariableHandlers = (clientID, getSocket) => {
  const variableHandlers = {};
  variables.forEach(([path, id, secret]) => {
    set(variableHandlers, path, {
      get: () => {
        if (secret) {
          throw new Error('Cannot access secret variable from client. Use .onServer() instead within Poly function.');
        } else {
          return axios.get(
            `/variables/${id}/value`
          ).then(({data}) => data);
        }
      },
      update: (value) => {
        return axios.patch(
          `/variables/${id}`,
          { value }
        ).then(response => {
          return {
            data: response.data,
            status: response.status,
            headers: response.headers,
          };
        });
      },
      onUpdate: (callback) => {
        const socket = getSocket();
        const unregisterEventHandler = () => {
          socket.off(`handleVariableChangeEvent:${id}`);
          socket.emit('unregisterVariableChangeEventHandler', {
              clientID,
              variableId: id,
              apiKey: '{{apiKey}}'
          });
          if (timeoutID) {
            clearTimeout(timeoutID);
          }
        };
        const handleEvent = (value) => {
          callback(value);
        };
        socket.emit('registerVariableChangeEventHandler', {
          clientID,
          variableId: id,
          apiKey: '{{apiKey}}'
        }, registered => {
          if (registered) {
            socket.on(`handleVariableChangeEvent:${id}`, handleEvent);
          }
        });

        return unregisterEventHandler;
      },
      onServer: (path) => ({
        type: 'PolyVariable',
        id,
        path
      }),
    });
  });
  return variableHandlers;
};

const getPathHandlers = () => {
  const pathHandlers = {
    get: () => {
      return axios.get(
        `/variables/context/values`
      ).then(({data}) => data);
    }
  };
  contextPaths.forEach(path => {
    set(pathHandlers, path, {
      get: () => {
        return axios.get(
          `/variables/context/${path}/values`
        ).then(({data}) => data);
      },
    });
  });
  return pathHandlers;
};

module.exports = (clientID, getSocket) => merge(
  getVariableHandlers(clientID, getSocket),
  getPathHandlers(),
  {
    onUpdate: (path, callback, options = {}) => {
      const socket = getSocket();
      const unregisterEventHandler = () => {
        socket.off(`handleVariablesChangeEvent:${path}`);
        socket.emit('unregisterVariablesChangeEventHandler', {
            clientID,
            path,
            apiKey: '{{apiKey}}'
        });
      }

      socket.emit('registerVariablesChangeEventHandler', {
        clientID,
        path,
        options,
        apiKey: '{{apiKey}}'
      }, registered => {
        if (registered) {
          socket.on(`handleVariablesChangeEvent:${path}`, callback);
        }
      });

      return unregisterEventHandler;
    }
  }
);
