const axios = require('../axios');
const set = require('lodash/set');
const get = require('lodash/get');

const variables = [
{{#each specifications}}
  ['{{#if context}}{{context}}.{{/if}}{{name}}', '{{id}}', {{variable.secret}}],
{{/each}}
];

module.exports = (clientID, getSocket) => {
  const variableHandlers = {};
  variables.forEach(([path, id, secret]) => {
    set(variableHandlers, path, {
      get: () => {
        if (secret) {
          return Promise.resolve('*** variable is secret ***');
        } else {
          return axios.get(
            `/variables/${id}/value`
          ).then(({data}) => data);
        }
      },
      update: (value) => {
        return axios.patch(
          `/variables/${id}`,
          { value }
        ).then(() => {});
      },
      onUpdate: (callback) => {
        const socket = getSocket();
        const unregisterEventHandler = () => {
          socket.off(`handleVariableUpdateEvent:${id}`);
          socket.emit('unregisterVariableUpdateEventHandler', {
              clientID,
              variableId: id,
              apiKey: '{{apiKey}}'
          });
          if (timeoutID) {
            clearTimeout(timeoutID);
          }
        };
        const handleEvent = (value) => {
          callback(value);
        };
        socket.emit('registerVariableUpdateEventHandler', {
          clientID,
          variableId: id,
          apiKey: '{{apiKey}}'
        }, registered => {
          if (registered) {
            socket.on(`handleVariableUpdateEvent:${id}`, handleEvent);
          }
        });

        return unregisterEventHandler;
      },
      onServer: () => ({
        type: 'PolyVariable',
        id
      }),
    });
  });
  return variableHandlers;
};
