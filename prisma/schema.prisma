generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/poly.db"
}

model Tenant {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now()) @map("created_at")
  name         String
  teams        Team[]
  environments Environment[]

  @@map("tenant")
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  users     User[]
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String   @map("tenant_id")

  @@map("team")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  name      String
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?   @map("team_id")
  role      String    @default("USER")
  vip       Boolean   @default(false) // is this person a VIP we want to track carefully?
  userKeys  UserKey[]

  @@map("user")
}

model UserKey {
  id            String      @id @unique @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String      @map("environment_id")
  key           String      @unique

  @@map("user_key")
}

model Environment {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now()) @map("created_at")
  name                 String
  tenant               Tenant                @relation(fields: [tenantId], references: [id])
  tenantId             String                @map("tenant_id")
  appKey               String                @unique @map("app_key")
  apiFunctions         ApiFunction[]
  webhookHandles       WebhookHandle[]
  customFunctions      CustomFunction[]
  authProviders        AuthProvider[]
  userKeys             UserKey[]
  systemPrompts        SystemPrompt[]
  conversationMessages ConversationMessage[]

  @@map("environment")
}

model ApiFunction {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now()) @map("created_at")
  environment       Environment @relation(fields: [environmentId], references: [id])
  environmentId     String      @map("environment_id")
  name              String
  context           String
  description       String      @default("")
  payload           String?
  method            String
  url               String
  headers           String?
  body              String?
  auth              String?
  response          String?
  argumentsMetadata String?     @map("arguments_metadata")
  trained           Boolean     @default(false)
  visibility        String      @default("TENANT")

  @@map("api_function")
}

model CustomFunction {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String      @map("environment_id")
  name          String
  context       String
  description   String      @default("")
  code          String
  arguments     String
  returnType    String?     @map("return_type")
  trained       Boolean     @default(false)
  serverSide    Boolean     @default(false) @map("server_side")
  visibility    String      @default("TENANT")

  @@map("custom_function")
}

model AuthProvider {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now()) @map("created_at")
  environment      Environment @relation(fields: [environmentId], references: [id])
  environmentId    String      @map("environment_id")
  name             String?
  context          String
  authorizeUrl     String      @map("authorize_url")
  tokenUrl         String      @map("token_url")
  revokeUrl        String?     @map("revoke_url")
  introspectUrl    String?     @map("introspect_url")
  audienceRequired Boolean     @default(false) @map("audience_required")
  refreshEnabled   Boolean     @default(false) @map("refresh_enabled")
  trained          Boolean     @default(false)
  authTokens       AuthToken[]
  visibility       String      @default("TENANT")

  @@map("auth_provider")
}

model WebhookHandle {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String      @map("environment_id")
  context       String
  name          String
  eventPayload  String      @map("event_payload")
  description   String      @default("")
  visibility    String      @default("TENANT")

  @@map("webhook_handle")
}

// store all the messages in a conversation
model ConversationMessage {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  environment   Environment       @relation(fields: [environmentId], references: [id])
  environmentId String            @map("environment_id")
  name          String            @default("") // not used for now. in future, will allow the user to have multiple conversations
  role          String // assistant or user
  content       String
  functions     FunctionDefined[]
  webhooks      WebhookDefined[]

  @@map("conversation_message")
}

model FunctionDefined {
  id         Int                 @id @default(autoincrement())
  message    ConversationMessage @relation(fields: [messageId], references: [id])
  messageId  String              @map("message_id")
  functionId String              @map("function_id") // could be a relation but isn't currently

  @@map("function_defined")
}

model WebhookDefined {
  id        Int                 @id @default(autoincrement())
  message   ConversationMessage @relation(fields: [messageId], references: [id])
  messageId String              @map("message_id")
  webhookId String              @map("webhook_id") // could be a relation but isn't currently

  @@map("webhook_defined")
}

// customizable prompt per user
model SystemPrompt {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String      @map("environment_id")
  content       String

  @@map("system_prompt")
}

model AuthToken {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  authProvider   AuthProvider @relation(fields: [authProviderId], references: [id])
  authProviderId String       @map("auth_provider_id")
  clientId       String       @map("client_id")
  clientSecret   String       @map("client_secret")
  callbackUrl    String?      @map("callback_url")
  audience       String?
  scopes         String
  state          String?
  accessToken    String?      @map("access_token")
  refreshToken   String?      @map("refresh_token")
  eventsClientId String?      @map("events_client_id")

  @@map("auth_token")
}

model ConfigVariable {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String   @unique // "keyword_similarity_threshold" | "function_match_limit"
  value     String

  @@map("config_variable")
}

model GptPlugin {
  id                        Int    @id @default(autoincrement())
  slug                      String @unique
  name                      String
  descriptionForMarketplace String @default("") @map("description_for_marketplace")
  descriptionForModel       String @default("") @map("description_for_model")
  iconUrl                   String @map("icon_url")
  functionIds               String // json array of function publicIds for now
}
