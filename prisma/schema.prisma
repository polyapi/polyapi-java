generator js {
  provider = "prisma-client-js"
  default  = "true"
}

generator py {
  provider             = "prisma-client-py"
  recursive_type_depth = "5"
  interface            = "sync"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                      String          @id(map: "idx_20369_sqlite_autoindex_tenant_1") @default(uuid())
  createdAt               String          @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name                    String
  publicVisibilityAllowed Boolean         @default(false) @map("public_visibility_allowed")
  limitTierId             String          @map("limit_tier_id")
  applications            Application[]
  configVariables         ConfigVariable[]
  environments            Environment[]
  teams                   Team[]
  limitTier               LimitTier       @relation(fields: [limitTierId], references: [id])
  users                   User[]

  @@map("tenant")
}

model User {
  id                   String               @id(map: "idx_20220_sqlite_autoindex_user_1") @default(uuid())
  createdAt            String               @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name                 String
  tenantId             String               @map("tenant_id")
  role                 String               @default("USER")
  vip                  Boolean              @default(false)
  apiKeys              ApiKey[]
  conversation         conversation[]
  conversationMessages ConversationMessage[]
  teamMembers          TeamMember[]
  tenant               Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("user")
}

model Team {
  id          String      @id(map: "idx_20235_sqlite_autoindex_team_1") @default(uuid())
  createdAt   String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name        String
  tenantId    String      @map("tenant_id")
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  teamMembers TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String @id(map: "idx_20260_sqlite_autoindex_team_member_1") @default(uuid())
  createdAt String @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  teamId    String @map("team_id")
  userId    String @map("user_id")
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_member")
}

model Environment {
  id              String          @id(map: "idx_20318_sqlite_autoindex_environment_1") @default(uuid())
  createdAt       String          @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name            String
  tenantId        String          @map("tenant_id")
  subdomain       String          @unique(map: "idx_20318_environment_subdomain_key")
  apiFunctions    ApiFunction[]
  apiKeys         ApiKey[]
  authProviders   AuthProvider[]
  configVariables ConfigVariable[]
  customFunctions CustomFunction[]
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  gptPlugins      GptPlugin[]
  systemPrompts   SystemPrompt[]
  variables       Variable[]
  webhookHandles  WebhookHandle[]

  @@map("environment")
}

model Application {
  id          String  @id(map: "idx_20241_sqlite_autoindex_application_1") @default(uuid())
  createdAt   String  @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  tenantId    String  @map("tenant_id")
  name        String
  description String  @default("")
  apiKeys     ApiKey[]
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("application")
}

model ApiKey {
  id            String       @id(map: "idx_20228_sqlite_autoindex_api_key_1") @default(uuid())
  createdAt     String       @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name          String
  environmentId String       @map("environment_id")
  key           String       @unique(map: "idx_20228_api_key_key_key")
  permissions   String       @default("{}")
  applicationId String?      @map("application_id")
  userId        String?      @map("user_id")
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_key")
}

model ApiFunction {
  id                           String      @id(map: "idx_20274_sqlite_autoindex_api_function_1") @default(uuid())
  createdAt                    String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  environmentId                String      @map("environment_id")
  name                         String
  context                      String
  description                  String      @default("")
  payload                      String?
  method                       String
  url                          String
  headers                      String?
  body                         String?
  auth                         String?
  responseType                 String?      @map("response_type")
  argumentsMetadata            String?      @map("arguments_metadata")
  trained                      Boolean      @default(false)
  visibility                   String       @default("ENVIRONMENT")
  graphqlIdentifier            String?      @map("graphql_identifier")
  graphqlIntrospectionResponse String?      @map("introspection_response")
  environment                  Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("api_function")
}

model CustomFunction {
  id            String      @id(map: "idx_20324_sqlite_autoindex_custom_function_1") @default(uuid())
  createdAt     String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  environmentId String      @map("environment_id")
  name          String
  context       String
  description   String      @default("")
  code          String
  arguments     String
  returnType    String?     @map("return_type")
  synchronous   Boolean     @default(true)
  requirements  String?     @map("requirements")
  trained       Boolean     @default(false)
  serverSide    Boolean     @default(false) @map("server_side")
  visibility    String      @default("ENVIRONMENT")
  apiKey        String?     @map("api_key")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("custom_function")
}

model AuthProvider {
  id               String      @id(map: "idx_20283_sqlite_autoindex_auth_provider_1") @default(uuid())
  createdAt        String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  environmentId    String      @map("environment_id")
  name             String?
  context          String
  authorizeUrl     String      @map("authorize_url")
  tokenUrl         String      @map("token_url")
  revokeUrl        String?     @map("revoke_url")
  introspectUrl    String?     @map("introspect_url")
  audienceRequired Boolean     @default(false) @map("audience_required")
  refreshEnabled   Boolean     @default(false) @map("refresh_enabled")
  trained          Boolean     @default(false)
  visibility       String      @default("ENVIRONMENT")
  environment      Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  authTokens       AuthToken[]

  @@map("auth_provider")
}

model WebhookHandle {
  id            String      @id(map: "idx_20293_sqlite_autoindex_webhook_handle_1") @default(uuid())
  createdAt     String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  environmentId String      @map("environment_id")
  context       String
  name          String
  eventPayload  String      @map("event_payload")
  description   String      @default("")
  visibility    String      @default("ENVIRONMENT")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("webhook_handle")
}

// which thread are the messages a part of?
model conversation {
  id              String                @id(map: "idx_20362_sqlite_autoindex_conversation_1")
  createdAt       String                @default(dbgenerated("CURRENT_TIMESTAMP"))
  userId          String
  workspaceFolder String                @default("")
  user            User                  @relation(fields: [userid], references: [id], onDelete: Restrict)
  messages        ConversationMessage[]
}

// store all the messages in a conversation
model ConversationMessage {
  id             String       @id(map: "idx_20266_sqlite_autoindex_conversation_message_1") @default(uuid())
  createdAt      String       @unique(map: "idx_20266_conversation_message_createdat_key") @default(dbgenerated("CURRENT_TIMESTAMP"))
  userId         String       @map("user_id")
  name           String       @default("")
  role           String

  // 1 is gpt messages, aka messages between us and ChatGPT, 2 is user messages, 3 is internal that was never sent anywhere (like "start stage 1")
  type Int @default(1)

  type           Int          @default(1)
  content        String
  conversationId String       @map("conversation_id")
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Restrict)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversation_message")
}


// customizable prompt per user
model SystemPrompt {
  id            String      @id(map: "idx_20254_sqlite_autoindex_system_prompt_1") @default(uuid())
  createdAt     String      @default(dbgenerated("CURRENT_TIMESTAMP"))
  environmentId String      @map("environment_id")
  content       String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("system_prompt")
}

model AuthToken {
  id             String       @id(map: "idx_20248_sqlite_autoindex_auth_token_1") @default(uuid())
  createdAt      String       @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  authProviderId String       @map("auth_provider_id")
  clientId       String       @map("client_id")
  clientSecret   String       @map("client_secret")
  callbackUrl    String?      @map("callback_url")
  audience       String?
  scopes         String
  state          String?
  accessToken    String?       @map("access_token")
  refreshToken   String?       @map("refresh_token")
  eventsClientId String?       @map("events_client_id")
  userId         String?       @map("user_id")
  authProvider   AuthProvider @relation(fields: [authProviderId], references: [id], onDelete: Cascade)

  @@map("auth_token")
}

model ConfigVariable {
  id            Int       @id(map: "idx_20302_config_variable_pkey") @default(autoincrement())
  createdAt     String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  name          String
  value         String
  tenantId      String?      @map("tenant_id")
  environmentId String?      @map("environment_id")
  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  tenant        Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("config_variable")
}

model GptPlugin {
  id                        Int       @id(map: "idx_20342_gpt_plugin_pkey") @default(autoincrement())
  slug                      String
  name                      String
  contactEmail              String      @default("info@polyapi.io")
  legalUrl                  String      @default("https://polyapi.io/legal")
  descriptionForMarketplace String      @default("") @map("description_for_marketplace")
  descriptionForModel       String      @default("") @map("description_for_model")
  iconUrl                   String      @map("icon_url")
  functionIds               String
  environmentId             String      @map("environment_id")
  authType                  String      @default("user_http") @map("auth_type")
  authToken                 String      @default("")
  environment               Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([slug, environmentId], map: "idx_20342_gpt_plugin_slug_environment_id_key")
  @@map("gpt_plugin")
}

model Variable {
  id            String      @id(map: "idx_20309_sqlite_autoindex_variable_1") @default(uuid())
  createdAt     String      @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  environmentId String      @map("environment_id")
  name          String
  context       String
  description   String      @default("")
  visibility    String      @default("ENVIRONMENT")
  secret        Boolean     @default(false)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("variable")
}

model Migration {
  id        String  @id(map: "idx_20335_sqlite_autoindex_migration_1") @default(uuid())
  createdAt String @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  fileName  String @map("file_name")

  @@map("migration")
}

model LimitTier {
  id                  String   @id(map: "idx_20382_sqlite_autoindex_limit_tier_1") @default(uuid())
  name                String  @default("")
  maxFunctions        Int  @map("max_functions")
  chatQuestionsPerDay Int  @map("chat_questions_per_day")
  functionCallsPerDay Int  @map("function_calls_per_day")
  tenants             Tenant[]

  @@map("limit_tier")
}

model Statistics {
  id            String  @id(map: "idx_20376_sqlite_autoindex_statistics_1") @default(uuid())
  createdAt     String @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  type          String
  apiKey        String @map("api_key")
  tenantId      String @map("tenant_id")
  environmentId String @map("environment_id")
  userId        String @map("user_id")
  applicationId String @map("application_id")
  data          String

  @@map("statistics")
}


model DocSection {
  // a section of our documentation
  // for now all documentation is related to Poly
  // but in future this might be tenanted and used for customer docs
  id     String  @id(map: "idx_20354_sqlite_autoindex_docsection_1")
  title  String @default("")
  text   String @default("")
  vector String @default("") // JSON of OpenAI embedding vector of the title+text
}