generator js {
  provider = "prisma-client-js"
  default  = "true"
}

generator py {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                      String           @id(map: "idx_25978_sqlite_autoindex_tenant_1") @default(uuid())
  createdAt               DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  name                    String?          @unique(map: "idx_25978_tenant_name_key")
  email                   String?          @unique(map: "idx_25978_tenant_email_key")
  publicVisibilityAllowed Boolean          @default(false) @map("public_visibility_allowed")
  publicNamespace         String?          @map("public_namespace")
  limitTierId             String?          @map("limit_tier_id")
  applications            Application[]
  configVariables         ConfigVariable[]
  environments            Environment[]
  teams                   Team[]
  limitTier               LimitTier?        @relation(fields: [limitTierId], references: [id])
  agreements              TenantAgreement[]
  users                   User[]
  enabled                 Boolean           @default(true)

  @@map("tenant")
}

model User {
  id        String     @id(map: "idx_25843_sqlite_autoindex_user_1") @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  name      String
  tenantId  String     @map("tenant_id")
  role      String     @default("USER")
  vip       Boolean    @default(false)
  email     String?    @unique(map: "idx_25843_user_email_key")
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade, map: "user_tenant_id_fkey")
  conversations        Conversation[]
  apiKeys              ApiKey[]
  teamMembers          TeamMember[]
  perfLogs             PerfLog[]

  @@map("users")
}

model Team {
  id          String       @id(map: "idx_25858_sqlite_autoindex_team_1") @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  name        String
  tenantId    String       @map("tenant_id")
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  teamMembers TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String    @id(map: "idx_25883_sqlite_autoindex_team_member_1") @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  teamId    String    @map("team_id")
  userId    String    @map("user_id")
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_member")
}

model Environment {
  id              String           @id(map: "idx_25933_sqlite_autoindex_environment_1") @default(uuid())
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  name            String
  tenantId        String           @map("tenant_id")
  subdomain       String           @unique(map: "idx_25933_environment_subdomain_key")
  apiFunctions    ApiFunction[]
  apiKeys         ApiKey[]
  authProviders   AuthProvider[]
  configVariables ConfigVariable[]
  customFunctions CustomFunction[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  gptPlugins      GptPlugin[]
  systemPrompts   SystemPrompt[]
  variables       Variable[]
  webhookHandles  WebhookHandle[]

  @@map("environment")
}

model Application {
  id          String    @id(map: "idx_25864_sqlite_autoindex_application_1") @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  tenantId    String    @map("tenant_id")
  name        String
  description String    @default("")
  apiKeys     ApiKey[]
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  perfLogs    PerfLog[]

  @@map("application")
}

model ApiKey {
  id            String       @id(map: "idx_25851_sqlite_autoindex_api_key_1") @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  name          String
  environmentId String       @map("environment_id")
  key           String       @unique(map: "idx_25851_api_key_key_key")
  permissions   String       @default("{}")
  applicationId String?      @map("application_id")
  userId        String?      @map("user_id")
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_key")
}

model ApiFunction {
  id                           String       @id(map: "idx_25889_sqlite_autoindex_api_function_1") @default(uuid())
  createdAt                    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  environmentId                String       @map("environment_id")
  name                         String
  context                      String
  description                  String       @default("")
  payload                      String?
  method                       String
  url                          String
  headers                      String?
  body                         String?
  auth                         String?
  responseType                 String?      @map("response_type")
  argumentsMetadata            String?      @map("arguments_metadata")
  trained                      Boolean      @default(false)
  visibility                   String       @default("ENVIRONMENT")
  graphqlIdentifier            String?      @map("graphql_identifier")
  graphqlIntrospectionResponse String?      @map("introspection_response")
  environment                  Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("api_function")
}

model CustomFunction {
  id            String       @id(map: "idx_26019_sqlite_autoindex_custom_function_1") @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  environmentId String       @map("environment_id")
  name          String
  context       String
  description   String       @default("")
  code          String
  arguments     String
  returnType    String?      @map("return_type")
  synchronous   Boolean      @default(true)
  requirements  String?      @map("requirements")
  trained       Boolean      @default(false)
  serverSide    Boolean      @default(false) @map("server_side")
  apiKey        String?      @map("api_key")
  visibility    String       @default("ENVIRONMENT")
  enabled       Boolean      @default(true)
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("custom_function")
}

model AuthProvider {
  id               String      @id(map: "idx_25898_sqlite_autoindex_auth_provider_1") @default(uuid())
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  environmentId    String      @map("environment_id")
  name             String?
  context          String
  authorizeUrl     String      @map("authorize_url")
  tokenUrl         String      @map("token_url")
  revokeUrl        String?     @map("revoke_url")
  introspectUrl    String?     @map("introspect_url")
  audienceRequired Boolean     @default(false) @map("audience_required")
  refreshEnabled   Boolean     @default(false) @map("refresh_enabled")
  trained          Boolean     @default(false)
  visibility       String      @default("ENVIRONMENT")
  environment      Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  authTokens       AuthToken[]

  @@map("auth_provider")
}

model WebhookHandle {
  id                  String      @id(map: "idx_25908_sqlite_autoindex_webhook_handle_1") @default(uuid())
  createdAt           DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  environmentId       String      @map("environment_id")
  context             String
  name                String
  eventPayload        String      @map("event_payload")
  description         String      @default("")
  visibility          String      @default("ENVIRONMENT")
  responseHeaders     String?     @map("response_headers")
  responsePayload     String?     @map("response_payload")
  responseStatus      Int?        @map("response_status")
  subpath             String?     @map("subpath")
  method              String?
  securityFunctionIds String?     @map("security_function_ids")
  enabled             Boolean     @default(true)
  environment         Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  @@map("webhook_handle")
}

model Conversation {
  id              String               @id(map: "idx_26012_sqlite_autoindex_conversation_1") @default(uuid())
  createdAt       DateTime             @default(now()) @db.Timestamptz(6) @map("createdat")
  user            User?                @relation(fields: [userId], references: [id])
  userId          String?              @map("userid")
  application     Application?         @relation(fields: [applicationId], references: [id])
  applicationId   String?              @map("applicationid")
  workspaceFolder String               @default("") @map("workspacefolder")
  messages        ConversationMessage[]


  @@map("conversation")
}

model ConversationMessage {
  id             String       @id(map: "idx_26004_sqlite_autoindex_conversation_message_1") @default(uuid())
  createdAt      DateTime     @unique(map: "idx_26004_conversation_message_createdat_key") @default(now()) @map("createdat") @db.Timestamptz(6)
  name           String       @default("")
  role           String
  type           Int          @default(1)
  content        String
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_message")
}

model SystemPrompt {
  id            String      @id(map: "idx_25877_sqlite_autoindex_system_prompt_1") @default(uuid())
  createdAt     DateTime    @default(now()) @map("createdat") @db.Timestamptz(6)
  environmentId String      @map("environment_id")
  content       String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("system_prompt")
}

model AuthToken {
  id             String        @id(map: "idx_25871_sqlite_autoindex_auth_token_1") @default(uuid())
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  authProviderId String        @map("auth_provider_id")
  clientId       String        @map("client_id")
  clientSecret   String        @map("client_secret")
  callbackUrl    String?       @map("callback_url")
  audience       String?
  scopes         String
  state          String?
  accessToken    String?       @map("access_token")
  refreshToken   String?       @map("refresh_token")
  eventsClientId String?       @map("events_client_id")
  userId         String?       @map("user_id")
  authProvider   AuthProvider  @relation(fields: [authProviderId], references: [id], onDelete: Cascade)

  @@map("auth_token")
}

model ConfigVariable {
  id            Int          @id(map: "idx_25926_config_variable_pkey") @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  name          String
  value         String
  tenantId      String?      @map("tenant_id")
  environmentId String?      @map("environment_id")
  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  tenant        Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("config_variable")
}

model GptPlugin {
  id                        Int          @id(map: "idx_25946_gpt_plugin_pkey") @default(autoincrement())
  slug                      String
  name                      String
  contactEmail              String      @default("info@polyapi.io") @map("contactemail")
  legalUrl                  String      @default("https://polyapi.io/legal") @map("legalurl")
  descriptionForMarketplace String      @default("") @map("description_for_marketplace")
  descriptionForModel       String      @default("") @map("description_for_model")
  iconUrl                   String      @map("icon_url")
  functionIds               String      @map("functionids")
  environmentId             String      @map("environment_id")
  authType                  String      @default("user_http") @map("auth_type")
  authToken                 String      @default("") @map("authtoken")
  environment               Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([slug, environmentId], map: "idx_25946_gpt_plugin_slug_environment_id_key")
  @@map("gpt_plugin")
}

model Variable {
  id            String       @id(map: "idx_25916_sqlite_autoindex_variable_1") @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  environmentId String       @map("environment_id")
  name          String
  context       String
  description   String       @default("")
  visibility    String       @default("ENVIRONMENT")
  secret        Boolean      @default(false)
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("variable")
}

model Migration {
  id        String    @id(map: "idx_25939_sqlite_autoindex_migration_1") @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  fileName  String    @map("file_name")

  @@map("migration")
}

model DocSection {
  id     String  @id(map: "idx_25958_sqlite_autoindex_docsection_1") @default(uuid())
  title  String  @default("")
  text   String  @default("")
  vector String  @default("")

  @@map("docsection")
}

model LimitTier {
  id                        String   @id(map: "idx_25972_sqlite_autoindex_limit_tier_1") @default(uuid())
  name                      String   @default("")
  maxFunctions              Int?     @map("max_functions")
  chatQuestionsPerDay       Int?     @map("chat_questions_per_day")
  functionCallsPerDay       Int?     @map("function_calls_per_day")
  variableCallsPerDay       Int?     @map("variable_calls_per_day")
  serverFunctionLimitCpu    Int?     @map("server_function_limit_cpu")
  serverFunctionLimitMemory Int?     @map("server_function_limit_memory")
  serverFunctionLimitTime   Int?     @map("server_function_limit_time")
  tenants                   Tenant[]

  @@map("limit_tier")
}

model Statistics {
  id            String    @id(map: "idx_25966_sqlite_autoindex_statistics_1") @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  type          String
  apiKey        String    @map("api_key")
  tenantId      String    @map("tenant_id")
  environmentId String    @map("environment_id")
  userId        String?   @map("user_id")
  applicationId String?   @map("application_id")
  data          String?

  @@map("statistics")
}

model TenantSignUp {
  id               String    @id(map: "idx_25985_sqlite_autoindex_tenant_sign_up_1") @default(uuid())
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  email            String    @unique(map: "idx_25985_tenant_sign_up_email_key")
  name             String?
  verificationCode String    @unique(map: "idx_25985_tenant_sign_up_verification_code_key") @map("verification_code")
  expiresAt        DateTime  @map("expires_at") @db.Timestamptz(6)

  @@map("tenant_sign_up")
}

model Tos {
  id         String            @id(map: "idx_25991_sqlite_autoindex_tos_1") @default(uuid())
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  content    String
  version    String            @unique(map: "idx_25991_tos_version_key")
  agreements TenantAgreement[]

  @@map("tos")
}

model TenantAgreement {
  id        String    @id(map: "idx_25997_sqlite_autoindex_tenant_agreement_1") @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  notes     String?
  agreedAt  DateTime  @default(now()) @map("agreed_at") @db.Timestamptz(6)
  tenantId  String    @map("tenant_id")
  tosId     String    @map("tos_id")
  email     String
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tos       Tos       @relation(fields: [tosId], references: [id], onDelete: Cascade)

  @@map("tenant_agreement")
}


model PerfLog {
  // log performance of specific requests (and other things) in our app
  id            String @id @default(uuid())
  start         DateTime
  duration      Float  // in seconds
  snippet       String   // human readable snippet about this logline
  input_length  Int  // how long was the input in characters?
  output_length Int   // how long was output in characters?
  type          Int   // see PerfLogType
  data          String @default("")  // more granular JSON data like how did each stage perform?
  load          Int @default(0)  // what is the load on the system? always 0 for now
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String?      @map("application_id")
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?      @map("user_id")

  @@map("perf_log")
}