generator js {
  provider = "prisma-client-js"
  default  = true
}

generator py {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/poly.db"
}

model Tenant {
  id                      String           @id @default(uuid())
  createdAt               DateTime         @default(now()) @map("created_at")
  name                    String
  users                   User[]
  teams                   Team[]
  environments            Environment[]
  applications            Application[]
  publicVisibilityAllowed Boolean          @default(false) @map("public_visibility_allowed")
  configVariables         ConfigVariable[]

  @@map("tenant")
}

model User {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now()) @map("created_at")
  name                 String
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String                @map("tenant_id")
  role                 String                @default("USER")
  vip                  Boolean               @default(false) // is this person a VIP we want to track carefully?
  conversations        Conversation[]
  conversationMessages ConversationMessage[]
  apiKeys              ApiKey[]
  teamMembers          TeamMember[]

  @@map("user")
}

model Team {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  name        String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String       @map("tenant_id")
  teamMembers TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String   @map("team_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("team_member")
}

model Environment {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  name            String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  tenantId        String           @map("tenant_id")
  subdomain       String           @unique
  apiFunctions    ApiFunction[]
  webhookHandles  WebhookHandle[]
  customFunctions CustomFunction[]
  authProviders   AuthProvider[]
  systemPrompts   SystemPrompt[]
  apiKeys         ApiKey[]
  gptPlugins      GptPlugin[]
  configVariables ConfigVariable[]
  variables       Variable[]

  @@map("environment")
}

model Application {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String   @map("tenant_id")
  name        String
  description String   @default("")
  apiKeys     ApiKey[]

  @@map("application")
}

model ApiKey {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at")
  name          String
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String       @map("environment_id")
  key           String       @unique
  permissions   String       @default("{}")
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String?      @map("application_id")
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?      @map("user_id")

  @@map("api_key")
}

model ApiFunction {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now()) @map("created_at")
  environment       Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId     String      @map("environment_id")
  name              String
  context           String
  description       String      @default("")
  payload           String?
  method            String
  url               String
  headers           String?
  body              String?
  auth              String?
  responseType      String?     @map("response_type")
  argumentsMetadata String?     @map("arguments_metadata")
  trained           Boolean     @default(false)
  visibility        String      @default("ENVIRONMENT")
  graphqlIdentifier String?     @map("graphql_identifier")
  graphqlIntrospectionResponse String? @map("introspection_response")
  @@map("api_function")
}

model CustomFunction {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String      @map("environment_id")
  name          String
  context       String
  description   String      @default("")
  code          String
  arguments     String
  returnType    String?     @map("return_type")
  synchronous   Boolean     @default(true)
  requirements  String?     @map("requirements")
  trained       Boolean     @default(false)
  serverSide    Boolean     @default(false) @map("server_side")
  apiKey        String?     @map("api_key")
  visibility    String      @default("ENVIRONMENT")

  @@map("custom_function")
}

model AuthProvider {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now()) @map("created_at")
  environment      Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId    String      @map("environment_id")
  name             String?
  context          String
  authorizeUrl     String      @map("authorize_url")
  tokenUrl         String      @map("token_url")
  revokeUrl        String?     @map("revoke_url")
  introspectUrl    String?     @map("introspect_url")
  audienceRequired Boolean     @default(false) @map("audience_required")
  refreshEnabled   Boolean     @default(false) @map("refresh_enabled")
  trained          Boolean     @default(false)
  authTokens       AuthToken[]
  visibility       String      @default("ENVIRONMENT")

  @@map("auth_provider")
}

model WebhookHandle {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String      @map("environment_id")
  context       String
  name          String
  eventPayload  String      @map("event_payload")
  description   String      @default("")
  visibility    String      @default("ENVIRONMENT")

  @@map("webhook_handle")
}

// which thread are the messages a part of?
model Conversation {
  id        String                @id @default(uuid())
  createdAt DateTime              @default(now())
  user      User                  @relation(fields: [userId], references: [id])
  userId    String
  messages  ConversationMessage[]
}

// store all the messages in a conversation
model ConversationMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @unique() @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  name      String   @default("") // not used for now. in future, will allow the user to have multiple conversations
  role      String // assistant or user or system or info

  // 1 is gpt messages, aka messages between us and ChatGPT, 2 is user messages, 3 is internal that was never sent anywhere (like "start stage 1")
  type Int @default(1)

  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @map("conversation_id")

  @@map("conversation_message")
}

// customizable prompt per user
model SystemPrompt {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String      @map("environment_id")
  content       String

  @@map("system_prompt")
}

model AuthToken {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  authProvider   AuthProvider @relation(fields: [authProviderId], references: [id], onDelete: Cascade)
  authProviderId String       @map("auth_provider_id")
  clientId       String       @map("client_id")
  clientSecret   String       @map("client_secret")
  callbackUrl    String?      @map("callback_url")
  audience       String?
  scopes         String
  state          String?
  accessToken    String?      @map("access_token")
  refreshToken   String?      @map("refresh_token")
  eventsClientId String?      @map("events_client_id")
  userId         String?      @map("user_id")

  @@map("auth_token")
}

model ConfigVariable {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  name          String
  value         String
  tenant        Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId      String?      @map("tenant_id")
  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String?      @map("environment_id")

  @@map("config_variable")
}

model GptPlugin {
  id                        Int         @id @default(autoincrement())
  slug                      String
  name                      String
  contactEmail              String      @default("info@polyapi.io")
  legalUrl                  String      @default("https://polyapi.io/legal")
  descriptionForMarketplace String      @default("") @map("description_for_marketplace")
  descriptionForModel       String      @default("") @map("description_for_model")
  iconUrl                   String      @map("icon_url")
  functionIds               String // json array of function publicIds for now
  environment               Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId             String      @map("environment_id")
  authType                  String      @map("auth_type") @default("user_http")
  authToken                 String      @default("")  //

  @@unique(fields: [slug, environmentId])
  @@map("gpt_plugin")
}

model Variable {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String      @map("environment_id")
  name          String
  context       String
  description   String      @default("")
  secret        Boolean     @default(false)
  visibility    String      @default("ENVIRONMENT")

  @@map("variable")
}

model Migration {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  fileName  String   @map("file_name")

  @@map("migration")
}

model DocSection {
  // a section of our documentation
  // for now all documentation is related to Poly
  // but in future this might be tenanted and used for customer docs
  id        String   @id @default(uuid())
  title     String   @default("")
  text      String   @default("")
  vector    String   @default("")  // JSON of OpenAI embedding vector of the title+text
}