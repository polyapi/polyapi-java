generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = "file:../prisma/data/poly.db"
}

model User {
  id                   Int                   @id @default(autoincrement())
  apiKey               String                @unique @map("api_key")
  name                 String?
  role                 String                @default("USER")
  urlFunctions         UrlFunction[]
  webhookHandles       WebhookHandle[]
  conversationMessages ConversationMessage[]

  @@map("user")
}

model UrlFunction {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  user            User           @relation(fields: [userId], references: [id])
  userId          Int            @map("user_id")
  name            String
  context         String
  description     String         @default("")
  payload         String?
  method          String
  url             String
  headers         String?
  body            String?
  auth            String?
  response        String?
  responseType    String?        @map("response_type")
  argumentTypes   String?        @map("argument_types")
  trained         Boolean        @default(false)
  publicId        String         @unique @default(uuid()) @map("public_id")
  webhookHandle   WebhookHandle? @relation(fields: [webhookHandleId], references: [id])
  webhookHandleId String?        @unique @map("webhook_handle_id")

  @@map("url_function")
}

model WebhookHandle {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @map("created_at")
  user         User         @relation(fields: [userId], references: [id])
  userId       Int          @map("user_id")
  context      String
  name         String
  eventPayload String       @map("event_payload")
  eventType    String       @map("event_type")
  urlFunction  UrlFunction?

  @@map("webhook_handle")
}

// store all the messages in a conversation
model ConversationMessage {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
  name    String   @default("") // not used for now. in future, will allow the user to have multiple conversations
  created DateTime @default(now())
  role    String // assistant or user
  content String

  @@map("conversation_message")
}
