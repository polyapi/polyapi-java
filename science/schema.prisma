generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = "file:../prisma/data/poly.db"
}

model User {
  id                   Int                   @id @default(autoincrement())
  apiKey               String                @unique @map("api_key")
  name                 String?
  role                 String                @default("USER")
  urlFunctions         UrlFunction[]
  webhookHandles       WebhookHandle[]
  customFunctions      CustomFunction[]
  authFunctions        AuthFunction[]
  conversationMessages ConversationMessage[]
  systemPrompts        SystemPrompt[]
  authTokens           AuthToken[]

  @@map("user")
}

model UrlFunction {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @map("created_at")
  user              User           @relation(fields: [userId], references: [id])
  userId            Int            @map("user_id")
  name              String
  context           String
  description       String         @default("")
  payload           String?
  method            String
  url               String
  headers           String?
  body              String?
  auth              String?
  response          String?
  argumentsMetadata String?        @map("arguments_metadata")
  trained           Boolean        @default(false)
  publicId          String         @unique @default(uuid()) @map("public_id")
  webhookHandle     WebhookHandle? @relation(fields: [webhookHandleId], references: [id])
  webhookHandleId   String?        @unique @map("webhook_handle_id")

  @@map("url_function")
}

model CustomFunction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  name        String
  context     String
  description String   @default("")
  code        String
  arguments   String
  returnType  String?  @map("return_type")
  publicId    String   @unique @default(uuid()) @map("public_id")
  trained     Boolean  @default(false)

  @@map("custom_function")
}

model AuthFunction {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now()) @map("created_at")
  user           User        @relation(fields: [userId], references: [id])
  userId         Int         @map("user_id")
  name           String
  context        String
  description    String      @default("")
  authUrl        String      @map("auth_url")
  accessTokenUrl String      @map("access_token_url")
  publicId       String      @unique @default(uuid()) @map("public_id")
  trained        Boolean     @default(false)
  authTokens     AuthToken[]

  @@map("auth_function")
}

model WebhookHandle {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @map("created_at")
  user         User         @relation(fields: [userId], references: [id])
  userId       Int          @map("user_id")
  context      String
  name         String
  eventPayload String       @map("event_payload")
  urlFunction  UrlFunction?

  @@map("webhook_handle")
}

// store all the messages in a conversation
model ConversationMessage {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id])
  userId    Int               @map("user_id")
  name      String            @default("") // not used for now. in future, will allow the user to have multiple conversations
  role      String // assistant or user
  content   String
  functions FunctionDefined[]
  webhooks  WebhookDefined[]

  @@map("conversation_message")
}

model FunctionDefined {
  id               Int                 @id @default(autoincrement())
  message          ConversationMessage @relation(fields: [messageId], references: [id])
  messageId        String              @map("message_id")
  functionPublicId String // could be a relation but isn't currently

  @@map("function_defined")
}

model WebhookDefined {
  id              Int                 @id @default(autoincrement())
  message         ConversationMessage @relation(fields: [messageId], references: [id])
  messageId       String              @map("message_id")
  webhookPublicId String // could be a relation but isn't currently

  @@map("webhook_defined")
}

// customizable prompt per user
model SystemPrompt {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  content   String

  @@map("system_prompt")
}

model AuthToken {
  createdAt      DateTime     @default(now()) @map("created_at")
  authFunction   AuthFunction @relation(fields: [authFunctionId], references: [id])
  authFunctionId Int          @map("auth_function_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  clientId       String       @map("client_id")
  clientSecret   String       @map("client_secret")
  state          String?
  accessToken    String?      @map("access_token")
  refreshToken   String?      @map("refresh_token")
  eventsClientId String?      @map("events_client_id")

  @@id([authFunctionId, userId])
  @@map("auth_token")
}

model ConfigVariable {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique // "keyword_similarity_threshold" | "function_match_limit"
  value     String

  @@map("config_variable")
}