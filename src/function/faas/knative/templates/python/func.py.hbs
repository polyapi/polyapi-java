{{!-- TODO figure out how to inject poly ahead of time --}}
{{!-- from polyapi import poly --}}
import logging
import sys
from typing import Any

FUNCTION_ENVIRONMENT_ID = "{{environmentId}}"

{{{code}}}

def _get_args(request):
    return request.json.get("args", [])

def main(context):
    """
    The context parameter contains the Flask request object and any
    CloudEvent received with the request.
    """
    # poly
    logging_enabled = context.headers.get('x-poly-do-log')
    logger = logging.getLogger("poly")
    logger.error(f"Poly DO LOG: {logging_enabled}")
    logger.error(f"Poly DO LOG == True: {logging_enabled == True}")

    if logging_enabled == True:
        logging.getLogger().setLevel(logging.DEBUG)
        logger = logging.getLogger("poly")
        handler = logging.StreamHandler()
        handler.setLevel(logging.DEBUG)

        formatter = logging.Formatter("[%(levelname)s] %(message)s [/%(levelname)s]")
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    # TODO there might be a context.cloudevent we need to handle here sometimes?
    args = _get_args(context.request)
    try:
        result = {{name}}(*args)
    except Exception as e:
        return str(e), 500

    if result == None:
        result = ""
    elif isinstance(result, bool):
        result = str(result)
    elif isinstance(result, int):
        result = f'(int) {result}'
    elif isinstance(result, float):
        result = f'(float) {result}'

    return result, 200