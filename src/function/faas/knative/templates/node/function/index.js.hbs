const poly = require('polyapi');
const { CloudEvent } = require('cloudevents');

const FUNCTION_ID = '{{id}}';
const FUNCTION_ENVIRONMENT_ID = '{{environmentId}}';

const originalConsole = {
  log: console.log,
  info: console.info,
  error: console.error,
  warn: console.warn,
};

const patchConsoleMethodWithLoggerData = (method, logLevel, loggingEnabled) => {
  const originalMethod = originalConsole[method];
  console[method] = function () {
    if (!loggingEnabled) {
      return;
    }
    const args = Array.prototype.slice.call(arguments);
    args.unshift();
    originalMethod.apply(console, [`[${logLevel}]`, ...args, `[/${logLevel}]`]);
  };
};

const handle = async (context, body) => {
  const loggingEnabled = context.headers['x-poly-do-log']?.toString() === 'true'
    || context.cloudevent?.environment === FUNCTION_ENVIRONMENT_ID;

  patchConsoleMethodWithLoggerData('log', 'LOG', loggingEnabled);
  patchConsoleMethodWithLoggerData('info', 'INFO', loggingEnabled);
  patchConsoleMethodWithLoggerData('error', 'ERROR', loggingEnabled);
  patchConsoleMethodWithLoggerData('warn', 'WARN', loggingEnabled);

  const POLY_USER_SESSION_ID = context.headers['openai-conversation-id'];
  const args = context.cloudevent ? (Array.isArray(body.data) ? body.data : [body.data]) : body.args;
  const processedArgs = args.map(arg => arg === '$poly-undefined-value' ? undefined : arg);
  const polyCustomPreset = {
    ...poly.polyCustom
  };
  const polyCustom = poly.polyCustom;

  polyCustom.userSessionId = POLY_USER_SESSION_ID;

  if (context.cloudevent) {
    context.log.info(`Received cloudevent: id=${context.cloudevent.id}, time=${context.cloudevent.time}, type=${context.cloudevent.type}, source=${context.cloudevent.source}`);
  }

  {{{code}}}

  try {
    const result = await {{name}}(...processedArgs);
    const statusCode = polyCustom.responseStatusCode || 200;

    if (context.cloudevent) {
      const executionId = context.cloudevent.executionid;
      if (executionId) {
        context.log.info('Returning CloudEvent...', CloudEvent);
        return new CloudEvent({
          source: context.cloudevent.source,
          type: 'trigger.response',
          data: {
            data: result,
            statusCode,
            executionId,
            functionId: FUNCTION_ID,
            environmentId: context.cloudevent.environment,
          }
        });
      } else {
        return {
          statusCode: 204
        };
      }
    } else {
      return {
        body: result,
        statusCode,
      };
    }
  } catch (e) {
    if (context.cloudevent) {
      const executionId = context.cloudevent.executionid;
      if (executionId) {
        context.log.info('Returning error response CloudEvent...', CloudEvent);
        return new CloudEvent({
          source: context.cloudevent.source,
          type: 'trigger.response',
          data: {
            data: e.message,
            statusCode: polyCustom.responseStatusCode || 500,
            executionId,
            functionId: FUNCTION_ID,
            environmentId: context.cloudevent.environment,
          }
        });
      }
    }

    return {
      body: {
        message: e.message,
        stack: e.stack
      },
      statusCode: polyCustom.responseStatusCode || 500,
    };
  } finally {
    // revert polyCustom to preset values
    poly.polyCustom = polyCustomPreset;
  }
}

module.exports = handle;
