const poly = require('polyapi');
const { CloudEvent } = require('cloudevents');

const handle = async (context, body) => {
  const POLY_USER_SESSION_ID = context.headers['openai-conversation-id'];
  const args = context.cloudevent ? (Array.isArray(body.data) ? body.data : [body.data]) : body.args;
  const polyCustomPreset = {
    ...poly.polyCustom
  };
  const polyCustom = poly.polyCustom;

  polyCustom.userSessionId = POLY_USER_SESSION_ID;

  if (context.cloudevent) {
    context.log.info(`Received cloudevent: id=${context.cloudevent.id}, time=${context.cloudevent.time}, type=${context.cloudevent.type}, source=${context.cloudevent.source}`);
  }

  {{{code}}}

  try {
    const result = await {{name}}(...args);
    const statusCode = polyCustom.responseStatusCode || 200;

    // revert polyCustom to preset values
    poly.polyCustom = polyCustomPreset;

    if (context.cloudevent) {
      const executionId = context.cloudevent.executionid;
      if (executionId) {
        context.log.info('Returning CloudEvent...', CloudEvent);
        return new CloudEvent({
          source: context.cloudevent.source,
          type: 'trigger.response',
          data: {
            data: result,
            statusCode,
            executionId,
          }
        });
      } else {
        return {
          statusCode: 204
        };
      }
    } else {
      return {
        body: result,
        statusCode,
      };
    }
  } catch (e) {
    return {
      body: {
        message: e.message,
        stack: e.stack
      },
      statusCode: 500
    };
  }
}

module.exports = handle;
